# Homeserver details
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: http://localhost:8008
    # The address that Gupshup can use to download media from the homeserver.
    public_address: https://matrix.example.com
    # The domain of the homeserver (for MXIDs, etc).
    domain: example.com
    # Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: true
    # What software is the homeserver running?
    # Standard Matrix homeservers like Synapse, Dendrite and Conduit should just use "standard" here.
    software: standard

# Application service host/registration related details
# Changing these values requires regeneration of the registration.
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: http://localhost:29324

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 29324
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. SQLite and Postgres are fully supported.
    # Other DBMSes supported by SQLAlchemy may or may not work.
    # Format examples:
    #   Postgres: postgres://username:password@hostname/dbname
    database: postgres://username:password@hostname/db

    # The unique ID of this appservice.
    id: gupshup
    # Username of the appservice bot.
    bot_username: gupshupbot
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    bot_displayname: Gupshup Whatsapp bot
    bot_avatar: mxc://maunium.net/NeXNQarUbrlYBiPCpprYsRqr

    # Whether or not to receive ephemeral events via appservice transactions.
    # Requires MSC2409 support (i.e. Synapse 1.22+).
    # You should disable bridge -> sync_with_custom_puppets when this is enabled.
    ephemeral_events: false

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: "This value is generated when generating the registration"
    hs_token: "This value is generated when generating the registration"

# Bridge config
bridge:
    # Localpart template of MXIDs for remote users.
    # {userid} is replaced with the phone number of the user (plain/E.164 international format).
    username_template: "gswa_{userid}"
    # Displayname template for remote users.
    # {displayname} is replaced with the phone number of the user (human-readable international format).
    displayname_template: "{displayname} (GS)"
    # How the rooms will be named?
    # {phone}       - phone number (international format)
    # {username}    - nickname set by the WhatsApp user
    room_name_template: "{username} ({phone})"
    # The prefix for commands. Only required in non-management rooms.
    command_prefix: "!gs"

    # Whether or not Matrix m.notice-type messages should be bridged.
    bridge_notices: false
    # Whether or not created rooms should have federation enabled.
    # If false, created portal rooms will never be federated.
    federate_rooms: true

    # Provisioning API part of the web server for automated portal creation and fetching information.
    # Used by things like mautrix-manager (https://github.com/tulir/mautrix-manager).
    provisioning:
        # Whether or not the provisioning API should be enabled.
        enabled: true
        # The prefix to use in the provisioning API endpoints.
        prefix: /_matrix/provision
        # The shared secret to authorize users of the API.
        # Set to "generate" to generate and save a new token.
        shared_secret: generate

    # Permissions for using the bridge.
    # Permitted values:
    #      relay - Allowed to be relayed through the bridge, no access to commands.
    #       user - Use the bridge with puppeting.
    #      admin - Use and administrate the bridge.
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions:
        "*": "relay"
        "example.com": "user"
        "@admin:example.com": "admin"

    relay:
        # Whether relay mode should be allowed. If allowed, `!gs set-relay` can be used to turn any
        # authenticated user into a relaybot for that chat.
        enabled: false
        # The formats to use when sending messages to Signal via a relay user.
        #
        # Available variables:
        #   $sender_displayname - The display name of the sender (e.g. Example User)
        #   $sender_username    - The username (Matrix ID localpart) of the sender (e.g. exampleuser)
        #   $sender_mxid        - The Matrix ID of the sender (e.g. @exampleuser:example.com)
        #   $message            - The message content
        message_formats:
            m.text: '*$sender_displayname*: $message'
            m.notice: '$sender_displayname: $message'
            m.file: '$sender_displayname sent a file'
            m.image: '$sender_displayname sent an image'
            m.audio: '$sender_displayname sent an audio file'
            m.video: '$sender_displayname sent a video'
            m.location: '$sender_displayname sent a location'

# Gupshup webhook settings.
gupshup:
    # Gupsghup base URL
    base_url: https://api.gupshup.io/sm/api/v1/msg
    # Path prefix for webhook endpoints. Subpaths are /status and /receive.
    # Note that the webhook must be put behind a reverse proxy with https.
    webhook_path: /gupshup
    # Dict of error codes and and their reasons
    error_codes:
        1000:
            reason_en: File format unsupported
            reason_es: Tipo de archivo no aceptado
        1001:
            reason_en: "Last Mapped Bot Details And Sender Details Mismatch"
            reason_es: "Los detalles del último bot asignado y los detalles del remitente no coinciden"
        1002:
            reason_en: "Number Does Not Exists On WhatsApp"
            reason_es: "El número no existe en WhatsApp"
        1003:
            reason_en: "Unable To Send Message | Check your wallet balance"
            reason_es: "Envío de mensajes inhabilitado | Verifica tu saldo en plataforma"
        1004:
            reason_en: "Message sending failed as user is inactive for session message and template messaging is disabled"
            reason_es: "Falló el envío del mensaje porque el usuario está inactivo para una sesión de mensajes y el envío de plantillas está desactivado"
        1005:
            reason_en: "Message sending failed as user is inactive for session message and template did not match"
            reason_es: "Mensaje no entregado, por favor intente nuevamente. Verifique que no hayan pasado más de 24 horas desde el último mensaje."
        1006:
            reason_en: "Message sending failed as user is inactive for session message and not opted in for template message"
            reason_es: "Falló el envío del mensaje porque el usuario está inactivo para una sesión de mensajes y no está habilitado para recibir plantillas"
        1007:
            reason_en: "Message sending failed as user is inactive for session message, not opted in for template message and template did not match"
            reason_es: "Falló el envío del mensaje porque el usuario está inactivo para una sesión de mensajes, no está habilitado para recibir plantillas, y el mensaje no coincidió con una plantilla"
        1008:
            reason_en: "User is not Opted in and Inactive"
            reason_es: "Usuario no habilitado para recibir mensajes e inactivo"
        1010:
            reason_en: "Invalid Media Url"
            reason_es: "URL de multimedia inválida"
        1011:
            reason_en: "Invalid Media Size"
            reason_es: "Tamaño de multimedia inválido"

# Python logging configuration.
#
# See section 16.7.2 of the Python documentation for more info:
# https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
logging:
    version: 1
    formatters:
        colored:
            (): gupshup_matrix.util.ColorFormatter
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
        normal:
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
    handlers:
        file:
            class: logging.handlers.RotatingFileHandler
            formatter: normal
            filename: ./gupshup-matrix.log
            maxBytes: 10485760
            backupCount: 10
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: DEBUG
        gupshup:
            level: DEBUG
        aiohttp:
            level: INFO
    root:
        level: DEBUG
        handlers: [file, console]
