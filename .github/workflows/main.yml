
name: Python lint and CI/CD

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - uses: isort/isort-action@master
      with:
        sort-paths: "./gupshup_matrix"
    - uses: psf/black@stable
      with:
        src: "./gupshup_matrix"
        version: "24.4.2"
        target_version: "py310"
    - name: pre-commit
      run: |
        pip install pre-commit
        pre-commit run -av trailing-whitespace
        pre-commit run -av end-of-file-fixer
        pre-commit run -av check-yaml
        pre-commit run -av check-added-large-files

  docker:
    if: "github.ref_name == 'master'"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ikonoim/gupshup-matrix:testing

  deploy-testing:
    if: "github.ref_name == 'master'"
    runs-on: ubuntu-latest
    needs: docker
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Connect to server and update docker image
        run: |-
          echo "** Connecting to testing server **"

          # Update the apt package index
          sudo apt-get update -qq

          # If ssh-agent does not exist, install openssh-client
          which ssh-agent || ( sudo apt-get install openssh-client )

          # Start the ssh-agent in the background
          eval $(ssh-agent -s)

          # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
          ssh-add <(echo "${{ secrets.SSH_PRIVATE_KEY }}")

          # Create the SSH config directory
          mkdir -vp ~/.ssh

          # Disable StrictHostKeyChecking ask in SSH config
          [[ -e ~/.ssh ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          ssh -tt ${{ secrets.TESTING }} "echo '** Connected **'"

          echo "** Download updated docker image **"
          # Download updated docker image to testing server
          ssh -tt ${{ secrets.TESTING }} "docker pull ikonoim/gupshup-matrix:${{vars.TAG_TESTING}}"

          echo "** Update gupshup image in registered stacks **"
          for stack in  ${{ vars.STACKS }}; do
            echo " >> Setting service variables"
            stack_name=$(echo ${stack} | tr -d '.')
            service=$(echo ${stack} | cut -d '.' -f1)
            gupshup_service="${stack_name}_${service}-gupshup"

            echo " >> Remove the service if exists"
            ssh -tt ${{ secrets.TESTING }} " \
              if docker service ps ${gupshup_service}; then \
                docker service rm ${gupshup_service}; \
              else \
                echo 'The service ${gupshup_service} is not exists'; \
              fi;
            "

            echo " >> Deploy the service"
            ssh -tt ${{ secrets.TESTING }} "yes | docker-stack deploy ${stack_name};"
          done
